(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var $___46__46__47_mod_47_todo__;
var Dropdown = require('../mod/ui_dropdown');
var Todos = ($___46__46__47_mod_47_todo__ = require("../mod/todo"), $___46__46__47_mod_47_todo__ && $___46__46__47_mod_47_todo__.__esModule && $___46__46__47_mod_47_todo__ || {default: $___46__46__47_mod_47_todo__}).default;
console.log('index.js');
var colours = [{
  name: "Red",
  hex: "#F21B1B"
}, {
  name: "Blue",
  hex: "#1B66F2"
}, {
  name: "Green",
  hex: "#07BA16"
}];
var data = [{
  url: 'http://tinyurl.com/lkevsb9',
  caption: 'Hong Kong!'
}, {
  url: 'http://tinyurl.com/mxkwh56',
  caption: 'Cows'
}, {
  url: 'http://tinyurl.com/nc7jv28',
  caption: 'Scooters'
}];
var Timer = React.createClass({
  displayName: "Timer",
  getInitialState: function() {
    return {time: 0};
  },
  componentDidMount: function() {
    this.timer = setInterval(this.tick, 1000);
  },
  componentWillUnmount: function() {
    this.timer && clearInterval(this.timer);
  },
  tick: function() {
    this.setState({time: this.state.time + 1});
  },
  render: function() {
    return (React.createElement("div", null, "Time: ", this.state.time));
  }
});
React.render(React.createElement(Todos, null), document.getElementById('test1'));


//# sourceURL=/Users/silvia/code_cj/gulp-new/assets/js/app/index.js
},{"../mod/todo":2,"../mod/ui_dropdown":3}],2:[function(require,module,exports){
"use strict";
'use strict';
var TodoList = React.createClass({
  displayName: "TodoList",
  propTypes: {items: React.PropTypes.arrayOf(React.PropTypes.string).isRequired},
  render: function() {
    var items = this.props.items;
    var len = items.length;
    var list = [];
    for (var i = 0; i < len; i++) {
      list.push(React.createElement("li", {key: i}, items[i]));
    }
    return (React.createElement("ul", null, items.map((function(item, index) {
      return (React.createElement("li", {key: index}, item));
    }))));
  }
});
var TodoForm = React.createClass({
  displayName: "TodoForm",
  propsTypes: {onSubmit: React.PropTypes.func.isRequired},
  getInitialState: function() {
    return {text: ''};
  },
  onTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  onSubmit: function(e) {
    e.preventDefault();
    if (this.state.text.trim()) {
      this.props.onSubmit(this.state.text);
      this.setState({text: ''});
    }
  },
  render: function() {
    return (React.createElement("form", {onSubmit: this.onSubmit}, React.createElement("input", {
      type: "text",
      value: this.state.text,
      onChange: this.onTextChange
    }), React.createElement("input", {
      type: "submit",
      value: "add"
    })));
  }
});
var Todos = React.createClass({
  displayName: "Todos",
  getInitialState: function() {
    return {items: []};
  },
  onSubmitTodo: function(newTodo) {
    var nextItems = this.state.items;
    nextItems.push(newTodo);
    this.setState({items: nextItems});
  },
  render: function() {
    return (React.createElement("div", {className: "Todos"}, React.createElement("h3", null, "Todo"), React.createElement(TodoList, {items: this.state.items}), React.createElement(TodoForm, {onSubmit: this.onSubmitTodo})));
  }
});
module.exports = Todos;


//# sourceURL=/Users/silvia/code_cj/gulp-new/assets/js/mod/todo.js
},{}],3:[function(require,module,exports){
"use strict";
var Dropdown = React.createClass({
  displayName: "Dropdown",
  getInitialState: function() {
    return {
      listVisible: false,
      selectedIndex: this.props.selectedIndex
    };
  },
  show: function() {
    this.setState({listVisible: true});
    document.addEventListener("click", this.hide);
  },
  hide: function() {
    this.setState({listVisible: false});
    document.removeEventListener("click", this.hide);
  },
  render: function() {
    var selected = this.props.list[this.state.selectedIndex];
    return React.createElement("div", {className: "dropdown-container" + (this.state.listVisible ? " show" : "")}, React.createElement("div", {
      className: "dropdown-display" + (this.state.listVisible ? " clicked" : ""),
      onClick: this.show
    }, React.createElement("span", {style: {color: selected.hex}}, selected.name), React.createElement("i", {className: "fa fa-angle-down"})), React.createElement("div", {className: "dropdown-list"}, React.createElement("div", null, this.renderListItems())));
  },
  handleClick: function(param, event) {
    this.setState({selectedIndex: param});
  },
  renderListItems: function() {
    var items = [];
    for (var i = 0; i < this.props.list.length; i++) {
      var item = this.props.list[i];
      items.push(React.createElement("div", {onClick: this.handleClick.bind(this, i)}, React.createElement("span", {style: {color: item.hex}}, item.name), React.createElement("i", {
        className: "fa fa-check",
        style: {display: (i == this.state.selectedIndex ? "block" : "none")}
      })));
    }
    return items;
  }
});
console.log(Dropdown);
module.exports = Dropdown;


//# sourceURL=/Users/silvia/code_cj/gulp-new/assets/js/mod/ui_dropdown.js
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
